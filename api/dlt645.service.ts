/**
 * I3oT-Pro-API
 * I3oT-Pro API for I3oT developer
 *
 * OpenAPI spec version: 1.0.0
 * Contact: i3ot@kuangyibang.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { Dlt645AddRegistryInfo } from '../model/dlt645AddRegistryInfo';
import { Dlt645RegistryInfo } from '../model/dlt645RegistryInfo';
import { InlineResponse200 } from '../model/inlineResponse200';
import { InlineResponse2001 } from '../model/inlineResponse2001';
import { InlineResponse2002 } from '../model/inlineResponse2002';
import { InlineResponse2003 } from '../model/inlineResponse2003';
import { InlineResponse2004 } from '../model/inlineResponse2004';
import { InlineResponse2005 } from '../model/inlineResponse2005';
import { InlineResponse2006 } from '../model/inlineResponse2006';
import { InlineResponse400 } from '../model/inlineResponse400';
import { InlineResponse4001 } from '../model/inlineResponse4001';
import { InlineResponse4002 } from '../model/inlineResponse4002';
import { InlineResponse4003 } from '../model/inlineResponse4003';
import { InlineResponse4004 } from '../model/inlineResponse4004';
import { InlineResponse4005 } from '../model/inlineResponse4005';
import { InlineResponse4006 } from '../model/inlineResponse4006';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class Dlt645Service {

    protected basePath = 'https://virtserver.swaggerhub.com/i3ot/I3oT-Pro/1.0.0';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 删除设备
     * 根据设备编号删除设备
     * @param deviceID 需要删除的设备编号
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteDlt645(deviceID: Array<number>, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse2002>;
    public deleteDlt645(deviceID: Array<number>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse2002>>;
    public deleteDlt645(deviceID: Array<number>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse2002>>;
    public deleteDlt645(deviceID: Array<number>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (deviceID === null || deviceID === undefined) {
            throw new Error('Required parameter deviceID was null or undefined when calling deleteDlt645.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (deviceID) {
            queryParameters = queryParameters.set('deviceID', deviceID.join(COLLECTION_FORMATS['csv']));
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<InlineResponse2002>(`${this.basePath}/devices/dlt645`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 删除地址信息
     * 删除指定设备编号对应的地址信息
     * @param deviceID 删除地址所对应的设备编号
     * @param recordAdd 需要删除的地址
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteDlt645Add(deviceID: number, recordAdd: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse2005>;
    public deleteDlt645Add(deviceID: number, recordAdd: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse2005>>;
    public deleteDlt645Add(deviceID: number, recordAdd: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse2005>>;
    public deleteDlt645Add(deviceID: number, recordAdd: Array<string>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (deviceID === null || deviceID === undefined) {
            throw new Error('Required parameter deviceID was null or undefined when calling deleteDlt645Add.');
        }

        if (recordAdd === null || recordAdd === undefined) {
            throw new Error('Required parameter recordAdd was null or undefined when calling deleteDlt645Add.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<InlineResponse2005>(`${this.basePath}/devices/dlt645/${encodeURIComponent(String(deviceID))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 返回设备列表
     * 返回所有Dlt645设备信息或指定编号的设备信息
     * @param deviceID 只返回指定设备编号的信息
     * @param skip number of records to skip for pagination
     * @param limit maximum number of records to return
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDlt645(deviceID?: Array<number>, skip?: number, limit?: number, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse200>;
    public getDlt645(deviceID?: Array<number>, skip?: number, limit?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse200>>;
    public getDlt645(deviceID?: Array<number>, skip?: number, limit?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse200>>;
    public getDlt645(deviceID?: Array<number>, skip?: number, limit?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (deviceID) {
            queryParameters = queryParameters.set('deviceID', deviceID.join(COLLECTION_FORMATS['csv']));
        }
        if (skip !== undefined && skip !== null) {
            queryParameters = queryParameters.set('skip', <any>skip);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<InlineResponse200>(`${this.basePath}/devices/dlt645`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 返回地址信息列表
     * 返回指定设备编号对应的地址信息
     * @param deviceID 指定设备编号
     * @param recordAdd 只返回指定地址的信息
     * @param skip number of records to skip for pagination
     * @param limit maximum number of records to return
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDlt645AddInfo(deviceID: number, recordAdd?: Array<string>, skip?: number, limit?: number, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse2003>;
    public getDlt645AddInfo(deviceID: number, recordAdd?: Array<string>, skip?: number, limit?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse2003>>;
    public getDlt645AddInfo(deviceID: number, recordAdd?: Array<string>, skip?: number, limit?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse2003>>;
    public getDlt645AddInfo(deviceID: number, recordAdd?: Array<string>, skip?: number, limit?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (deviceID === null || deviceID === undefined) {
            throw new Error('Required parameter deviceID was null or undefined when calling getDlt645AddInfo.');
        }




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (recordAdd) {
            queryParameters = queryParameters.set('RecordAdd', recordAdd.join(COLLECTION_FORMATS['csv']));
        }
        if (skip !== undefined && skip !== null) {
            queryParameters = queryParameters.set('skip', <any>skip);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<InlineResponse2003>(`${this.basePath}/devices/dlt645/${encodeURIComponent(String(deviceID))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 返回地址中的值列表
     * 返回指定设备编号对应的地址中的值
     * @param deviceID 指定设备编号
     * @param recordAdd 只返回指定地址的值
     * @param skip number of records to skip for pagination
     * @param limit maximum number of records to return
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDlt645AddValue(deviceID: number, recordAdd?: Array<string>, skip?: number, limit?: number, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse2006>;
    public getDlt645AddValue(deviceID: number, recordAdd?: Array<string>, skip?: number, limit?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse2006>>;
    public getDlt645AddValue(deviceID: number, recordAdd?: Array<string>, skip?: number, limit?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse2006>>;
    public getDlt645AddValue(deviceID: number, recordAdd?: Array<string>, skip?: number, limit?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (deviceID === null || deviceID === undefined) {
            throw new Error('Required parameter deviceID was null or undefined when calling getDlt645AddValue.');
        }




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (recordAdd) {
            queryParameters = queryParameters.set('RecordAdd', recordAdd.join(COLLECTION_FORMATS['csv']));
        }
        if (skip !== undefined && skip !== null) {
            queryParameters = queryParameters.set('skip', <any>skip);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<InlineResponse2006>(`${this.basePath}/devices/dlt645/${encodeURIComponent(String(deviceID))}/value`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 添加/修改设备
     * 添加/修改Dlt645设备
     * @param body 
     * @param deviceID 需要修改的设备编号
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public registerDlt645(body?: Array<Dlt645RegistryInfo>, deviceID?: Array<number>, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse2001>;
    public registerDlt645(body?: Array<Dlt645RegistryInfo>, deviceID?: Array<number>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse2001>>;
    public registerDlt645(body?: Array<Dlt645RegistryInfo>, deviceID?: Array<number>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse2001>>;
    public registerDlt645(body?: Array<Dlt645RegistryInfo>, deviceID?: Array<number>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (deviceID) {
            queryParameters = queryParameters.set('deviceID', deviceID.join(COLLECTION_FORMATS['csv']));
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<InlineResponse2001>(`${this.basePath}/devices/dlt645`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 添加地址信息
     * 添加指定设备编号对应的地址信息
     * @param deviceID 指定设备编号
     * @param body 
     * @param recordAdd 需要修改的地址
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public registerDlt645Add(deviceID: number, body?: Array<Dlt645AddRegistryInfo>, recordAdd?: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse2004>;
    public registerDlt645Add(deviceID: number, body?: Array<Dlt645AddRegistryInfo>, recordAdd?: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse2004>>;
    public registerDlt645Add(deviceID: number, body?: Array<Dlt645AddRegistryInfo>, recordAdd?: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse2004>>;
    public registerDlt645Add(deviceID: number, body?: Array<Dlt645AddRegistryInfo>, recordAdd?: Array<string>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (deviceID === null || deviceID === undefined) {
            throw new Error('Required parameter deviceID was null or undefined when calling registerDlt645Add.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (recordAdd) {
            queryParameters = queryParameters.set('RecordAdd', recordAdd.join(COLLECTION_FORMATS['csv']));
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<InlineResponse2004>(`${this.basePath}/devices/dlt645/${encodeURIComponent(String(deviceID))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
